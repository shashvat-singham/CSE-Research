{"ast":null,"code":"export { urlAlphabet } from './url-alphabet/index.js';\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes));\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;\n  let step = -~(1.6 * mask * defaultSize / alphabet.length);\n  return (size = defaultSize) => {\n    let id = '';\n\n    while (true) {\n      let bytes = getRandom(step);\n      let j = step;\n\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || '';\n        if (id.length === size) return id;\n      }\n    }\n  };\n};\nexport let customAlphabet = (alphabet, size = 21) => customRandom(alphabet, size, random);\nexport let nanoid = (size = 21) => crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n  byte &= 63;\n\n  if (byte < 36) {\n    id += byte.toString(36);\n  } else if (byte < 62) {\n    id += (byte - 26).toString(36).toUpperCase();\n  } else if (byte > 62) {\n    id += '-';\n  } else {\n    id += '_';\n  }\n\n  return id;\n}, '');","map":{"version":3,"sources":["C:/Users/shash/OneDrive/Desktop/Cyclopslogin/node_modules/nanoid/index.browser.js"],"names":["urlAlphabet","random","bytes","crypto","getRandomValues","Uint8Array","customRandom","alphabet","defaultSize","getRandom","mask","Math","log","length","LN2","step","size","id","j","customAlphabet","nanoid","reduce","byte","toString","toUpperCase"],"mappings":"AAAA,SAASA,WAAT,QAA4B,yBAA5B;AACA,OAAO,IAAIC,MAAM,GAAGC,KAAK,IAAIC,MAAM,CAACC,eAAP,CAAuB,IAAIC,UAAJ,CAAeH,KAAf,CAAvB,CAAtB;AACP,OAAO,IAAII,YAAY,GAAG,CAACC,QAAD,EAAWC,WAAX,EAAwBC,SAAxB,KAAsC;AAC9D,MAAIC,IAAI,GAAG,CAAC,KAAMC,IAAI,CAACC,GAAL,CAASL,QAAQ,CAACM,MAAT,GAAkB,CAA3B,IAAgCF,IAAI,CAACG,GAA5C,IAAoD,CAA/D;AACA,MAAIC,IAAI,GAAG,CAAC,EAAG,MAAML,IAAN,GAAaF,WAAd,GAA6BD,QAAQ,CAACM,MAAxC,CAAZ;AACA,SAAO,CAACG,IAAI,GAAGR,WAAR,KAAwB;AAC7B,QAAIS,EAAE,GAAG,EAAT;;AACA,WAAO,IAAP,EAAa;AACX,UAAIf,KAAK,GAAGO,SAAS,CAACM,IAAD,CAArB;AACA,UAAIG,CAAC,GAAGH,IAAR;;AACA,aAAOG,CAAC,EAAR,EAAY;AACVD,QAAAA,EAAE,IAAIV,QAAQ,CAACL,KAAK,CAACgB,CAAD,CAAL,GAAWR,IAAZ,CAAR,IAA6B,EAAnC;AACA,YAAIO,EAAE,CAACJ,MAAH,KAAcG,IAAlB,EAAwB,OAAOC,EAAP;AACzB;AACF;AACF,GAVD;AAWD,CAdM;AAeP,OAAO,IAAIE,cAAc,GAAG,CAACZ,QAAD,EAAWS,IAAI,GAAG,EAAlB,KAC1BV,YAAY,CAACC,QAAD,EAAWS,IAAX,EAAiBf,MAAjB,CADP;AAEP,OAAO,IAAImB,MAAM,GAAG,CAACJ,IAAI,GAAG,EAAR,KAClBb,MAAM,CAACC,eAAP,CAAuB,IAAIC,UAAJ,CAAeW,IAAf,CAAvB,EAA6CK,MAA7C,CAAoD,CAACJ,EAAD,EAAKK,IAAL,KAAc;AAChEA,EAAAA,IAAI,IAAI,EAAR;;AACA,MAAIA,IAAI,GAAG,EAAX,EAAe;AACbL,IAAAA,EAAE,IAAIK,IAAI,CAACC,QAAL,CAAc,EAAd,CAAN;AACD,GAFD,MAEO,IAAID,IAAI,GAAG,EAAX,EAAe;AACpBL,IAAAA,EAAE,IAAI,CAACK,IAAI,GAAG,EAAR,EAAYC,QAAZ,CAAqB,EAArB,EAAyBC,WAAzB,EAAN;AACD,GAFM,MAEA,IAAIF,IAAI,GAAG,EAAX,EAAe;AACpBL,IAAAA,EAAE,IAAI,GAAN;AACD,GAFM,MAEA;AACLA,IAAAA,EAAE,IAAI,GAAN;AACD;;AACD,SAAOA,EAAP;AACD,CAZD,EAYG,EAZH,CADK","sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"]},"metadata":{},"sourceType":"module"}